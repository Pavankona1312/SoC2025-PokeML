# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QhnVjRLkPI4MywlTodr7YyEZ6e9mL5PN
"""

!pip install gradio torch torchvision

!pip install kagglehub gradio torch torchvision --quiet

import kagglehub

# torchvision is no longer supporting caltech, so kaggle
path = kagglehub.dataset_download("imbikramsaha/caltech-101")
print("Path to dataset files:", path)

from torchvision.datasets import ImageFolder
from torchvision import transforms
from torch.utils.data import DataLoader, random_split

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor()
])
dataset_path = "/kaggle/input/caltech-101/caltech-101"
dataset = ImageFolder(root=dataset_path, transform=transform)

idx_to_class = {str(v): k for k, v in dataset.class_to_idx.items()}
import json
with open("caltech_labels.json", "w") as f:
    json.dump(idx_to_class, f)

# used 80-20
train_size = int(0.8 * len(dataset))
val_size = len(dataset) - train_size
train_data, val_data = random_split(dataset, [train_size, val_size])

train_loader = DataLoader(train_data, batch_size=32, shuffle=True)
val_loader = DataLoader(val_data, batch_size=32)

import torch
import torch.nn as nn
import torch.nn.functional as F

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

class CustomCNN(nn.Module):
    def __init__(self, num_classes=102):
        super().__init__()

        def conv_block(in_channels, out_channels, kernel_size, stride):
            return nn.Sequential(
                nn.Conv2d(in_channels, out_channels, kernel_size=kernel_size, stride=stride, padding=kernel_size // 2),
                nn.BatchNorm2d(out_channels),
                nn.LeakyReLU(inplace=True),
                nn.MaxPool2d(2),
                nn.Dropout(0.4)
            )

        self.features = nn.Sequential(
            conv_block(3, 64, 7, 2),
            conv_block(64, 128, 5, 1),
            conv_block(128, 256, 5, 1),
            conv_block(256, 512, 5, 1)
        )

        self.classifier = nn.Sequential(
            nn.Flatten(),
            nn.Linear(512 * 7 * 7, 4096),
            nn.BatchNorm1d(4096),
            nn.LeakyReLU(),
            nn.Dropout(0.5),
            nn.Linear(4096, 1024),
            nn.LeakyReLU(),
            nn.Linear(1024, 512),
            nn.LeakyReLU(),
            nn.Linear(512, 256),
            nn.LeakyReLU(),
            nn.Linear(256, num_classes)
        )

    def forward(self, x):
        x = self.features(x)
        x = self.classifier(x)
        return x

model = CustomCNN(num_classes=len(dataset.classes)).to(device)

from torch.optim import Adam
from tqdm import tqdm

criterion = nn.CrossEntropyLoss()
optimizer = Adam(model.parameters(), lr=1e-4)
epochs = 5  # Increase later

for epoch in range(epochs):
    model.train()
    total, correct, loss_sum = 0, 0, 0
    for inputs, labels in tqdm(train_loader):
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        _, preds = torch.max(outputs, 1)
        correct += (preds == labels).sum().item()
        total += labels.size(0)
        loss_sum += loss.item()

    acc = 100 * correct / total
    print(f"Epoch {epoch+1}: Loss = {loss_sum:.4f}, Accuracy = {acc:.2f}%")

torch.save(model.state_dict(), "caltech_model.pth")

import gradio as gr
from PIL import Image

model.load_state_dict(torch.load("caltech_model.pth", map_location=device))
model.eval()

def predict(image):
    image = image.convert("RGB")
    input_tensor = transform(image).unsqueeze(0).to(device)
    with torch.no_grad():
        output = model(input_tensor)
        probs = F.softmax(output, dim=1)[0]
        top3_prob, top3_idx = torch.topk(probs, 3)

    with open("caltech_labels.json") as f:
        idx_to_class = json.load(f)

    result = []
    for i in range(3):
        label = idx_to_class[str(top3_idx[i].item())]
        confidence = round(top3_prob[i].item() * 100, 2)
        result.append(f"{i+1}. {label} ({confidence}%)")
    return "\n".join(result)

gr.Interface(
    fn=predict,
    inputs=gr.Image(type="pil"),
    outputs="text",
    title="Pavan + Dan's Caltech-101 CNN Classifier",
    description="Upload an image from Caltech-101 to classify it.",
).launch(share=True)